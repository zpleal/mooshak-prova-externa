#!/usr/local/bin/node

const config = require('./conf');

const restart = __dirname+'/restart';

const fs = require('fs');
const { exec } = require("child_process");
const readline = require('readline');

const stdin = process.stdin;
const input = [];

stdin.on('data', (chunk) => input.push( chunk ) );
stdin.on('close',  () => {
    const data = JSON.parse(input.join());
    const conf = getConfigFileContent(data);

    writeConfigFileAndResart(conf)
        .then( getCurrentConfig )
        .then(  respond )
        .catch( e => respond({ error: e.message }));
});

function getConfigFileContent(data) {
    if(data && Array.isArray(data)) {
        const content = [];

        content.push(`
# file generated by mooshak-prova-externa (zp)

Redirect               ${config.path} ${config.path}

<Location ${config.path}>
    ProxyPass              ${config.url}
    ProxyPassReverse       /
    ProxyPassReverseCookiePath / ${config.path}

`);
        if(data.length === 0) {
            content.push(`  Require all denied`);
        } else for(const ip of data) {
            content.push(`  Require ip  ${ip}`);
        }
        content.push(`
</Location>
`);
        return content.join('\n');
    } else
        return null;
}

function writeConfigFileAndResart(content) {

    return new Promise( (resolve,reject) => {
        if(content) {
            fs.writeFile(config.file,content,(err) => {

                if(err)
                     reject(new Error(`Error writing config file: ${err.message}`));
                else {
            
                    exec(restart, (error, stdout, stderr) => {
                        if(error)
                            reject(new Error(`restart: execution error: ${error}`));
                        else if(stdout !== '')
                            reject(new Error(`restart: unexpected output: ${stdout}`));
                        else if(stderr !== '')
                            reject(new Error(`restart: unexpected stderr: ${stderr}`));
                        else 
                            resolve();
                    });
                }
            });
        } else 
            resolve();
    });   
}
  
function getCurrentConfig() {

    return new Promise((resolve,reject) => {

        fs.readFile(config.file,(err, data) => {
            if(err) {
                reject(new Error(`error reading config file: ${err.message}`));
            } else {    
                const answer = { ips: [], address: process.env['REMOTE_ADDR']};
                const text = data.toString();

                /*  // match.all() only available after Node 12.0.0 
                for(let [all,ip] of text.matchAll(/Require\s+ip\s+([\d\.:]+)/g))
                    answer.ips.push(ip);
                */ 
                const matches = text.match(/Require\s+ip\s+[\d\.:]+/g);
                if(matches)
                    for(const require of matches) {
                        const found = require.match(/[\d\.:]+/)
                        if(found)
                            answer.ips.push(found[0]);
                    }


                resolve(answer);
            }
        });
    });
}

async function respond(answer) {

    console.log('Content-type: text/json');
    console.log('');
    console.log(JSON.stringify(answer));
}